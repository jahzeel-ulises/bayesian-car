import pygame
from Car import Car
from Map import Map
import threading
import time
import random 
import pandas as pd
from GaussianNB import GaussianNB
import math

map =[
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
]


class thread_():
    def __init__(self,map,img) -> None:
        self.run_ = True
        self.map_ = map
        self.img_ = img

    def run(self,car):
        """Updates car position each 0.5 seconds.

        Parameters
        -----------
        car: Object car
        """
        self.run_ = True
        while self.run_:
            distances = car.get_distances(self.map_)
            angle = car.get_angle(self.map_)
            prob = [P_Dir_S1S2S3CarDirAngle(car.dir_,i,distances[0],distances[1],distances[2],angle) for i in range(4)]
            pred = prob.index(max(prob))
            car.dir_ = int(pred)
            self.img_ = rotate_img(pygame.transform.scale(pygame.image.load("car.png"),(30,30)),car.dir_)
            car.update_position()
            print(car.position_)
            time.sleep(0.2)
    
    def stop(self):
        """Stops the while in self.run method."""
        self.run_ = False

def isin(car,maps):
    """Checks if the car is in the target zone
    
    Parameters
    ------------
    car: Object car

    maps: Object map

    Returns
    -------------
    bool:
        True if car is in the zone, False if not
    """
    return (car.position_[0] >= maps.zone_[0] and car.position_[0] <= maps.zone_[0] + 2) and (car.position_[1] >= maps.zone_[1] and car.position_[1] <= maps.zone_[1]+2)

def drawWalls(map,screen):
    """Draws the map and the zone in a pygame screen"""
    i,j = len(map.map_[0]), len(map.map_)

    pygame.draw.rect(screen, (255,0,0), pygame.Rect(map.zone_[1]*20, map.zone_[0]*20, 60, 60))
    for x in range(i):
        for y in range(j):
            if map.map_[y][x] == 1:
                pygame.draw.rect(screen, (0,0,0), pygame.Rect(x*20, y*20, 20, 20))

def drawCar(screen,img,car):
     """Draws the car in the screen"""
     screen.blit(img,(car.position_[1]*20,car.position_[0]*20))


def rotate_img(img,dir):
    if dir == 0:
        return pygame.transform.rotate(img,180)
    if dir == 1:
        return pygame.transform.rotate(img,90)
    if dir == 3:
        return pygame.transform.rotate(img,-90)
    if dir == 2:
        return img


def norm_dist(x,mu,sigma):
  return (1/math.sqrt(2*math.pi*sigma))*math.exp(-0.5*(((x-mu)/sigma)**2))

def P_Dir_S1S2S3CarDirAngle(carDir,dir,S1,S2,S3,angle):
  tuple_ = (carDir,dir)
  prob = math.log(0.3)+P_CarDirDir[tuple_]+math.log(norm_dist(S1,P_S1_CarDirDir[tuple_]["mu"],P_S1_CarDirDir[tuple_]["std"])) + math.log(norm_dist(S2,P_S2_CarDirDir[tuple_]["mu"],P_S2_CarDirDir[tuple_]["std"])) + math.log(norm_dist(S3,P_S3_CarDirDir[tuple_]["mu"],P_S3_CarDirDir[tuple_]["std"])) + math.log(1e-9+norm_dist(angle,P_Angle_CarDirDir[tuple_]["mu"],P_Angle_CarDirDir[tuple_]["std"]))
  prob += math.log(0.7)+P_CarDirDir_[tuple_]+math.log(norm_dist(S1,P_S1_CarDirDir[tuple_]["mu"],P_S1_CarDirDir[tuple_]["std"])) + math.log(norm_dist(S2,P_S2_CarDirDir[tuple_]["mu"],P_S2_CarDirDir[tuple_]["std"])) + math.log(norm_dist(S3,P_S3_CarDirDir[tuple_]["mu"],P_S3_CarDirDir[tuple_]["std"])) + math.log(1e-9+norm_dist(angle,P_Angle_CarDirDir[tuple_]["mu"],P_Angle_CarDirDir[tuple_]["std"]))
  return prob

P_CarDirDir_ = {(0, 0): 0.1255192878338279, (0, 1): 0.013353115727002967, (0, 2): 0.0002967359050445104, (0, 3): 0.02462908011869436, (1, 0): 0.026409495548961423, (1, 1): 0.2973293768545994, (1, 2): 0.011869436201780416, (1, 3): 0.0005934718100890207, (2, 0): 0.0002967359050445104, (2, 1): 0.024925816023738872, (2, 2): 0.13086053412462909, (2, 3): 0.00741839762611276, (3, 0): 0.011572700296735905, (3, 1): 0.0002967359050445104, (3, 2): 0.020474777448071215, (3, 3): 0.30415430267062316}
P_CarDirDir = {(0, 0): 0.108360450563204, (0, 1): 0.015644555694618274, (0, 2): 0.00031289111389236547, (0, 3): 0.101589486858573217, (1, 0): 0.009386733416770964, (1, 1): 0.24342928660826033, (1, 2): 0.026282853566958697, (1, 3): 0.0037546933667083854, (2, 0): 0.0018773466833541927, (2, 1): 0.021589486858573217, (2, 2): 0.123279098873592, (2, 3): 0.02002503128911139, (3, 0): 0.025344180225281603, (3, 1): 0.0025031289111389237, (3, 2): 0.02127659574468085, (3, 3): 0.2753441802252816}


P_S1_CarDirDir = {(0, 0): {'mu': 4.9810874704491725, 'std': 5.878277284911146}, (0, 1): {'mu': 7.466666666666667, 'std': 6.279837867044311}, (0, 2): {'mu': 13.0, 'std': 13}, (0, 3): {'mu': 11.204819277108435, 'std': 5.31624073154343}, (1, 0): {'mu': 11.146067415730338, 'std': 4.391496332784307}, (1, 1): {'mu': 4.401197604790419, 'std': 4.9252878192823895}, (1, 2): {'mu': 6.475, 'std': 5.31078969452634}, (1, 3): {'mu': 2.5, 'std': 3.5355339059327378}, (2, 0): {'mu': 1.0, 'std': 1}, (2, 1): {'mu': 12.833333333333334, 'std': 4.100641540561269}, (2, 2): {'mu': 5.365079365079365, 'std': 6.012906992882105}, (2, 3): {'mu': 14.16, 'std': 2.1150256105620406}, (3, 0): {'mu': 5.538461538461538, 'std': 4.789495929120385}, (3, 1): {'mu': 5.0, 'std': 5}, (3, 2): {'mu': 11.173913043478262, 'std': 4.832355782027238}, (3, 3): {'mu': 2.0370731707317074, 'std': 2.3348981215044216}}
P_S2_CarDirDir = {(0, 0): {'mu': 10.569739952718676, 'std': 4.365334325235322}, (0, 1): {'mu': 5.488888888888889, 'std': 5.467350289849662}, (0, 2): {'mu': 8.0, 'std': 8}, (0, 3): {'mu': 8.337349397590362, 'std': 4.5432262857742}, (1, 0): {'mu': 10.348314606741573, 'std': 5.04547755104308}, (1, 1): {'mu': 12.926147704590818, 'std': 3.6319889298500305}, (1, 2): {'mu': 6.65, 'std': 6.87451630000063}, (1, 3): {'mu': 7.5, 'std': 10.606601717798213}, (2, 0): {'mu': 8.0, 'std': 8}, (2, 1): {'mu': 7.2023809523809526, 'std': 4.264676323272777}, (2, 2): {'mu': 10.240362811791384, 'std': 3.658278762537387}, (2, 3): {'mu': 1.56, 'std': 1.260952021291849}, (3, 0): {'mu': 7.538461538461538, 'std': 6.843537688737163}, (3, 1): {'mu': 9.0, 'std': 9}, (3, 2): {'mu': 8.53623188405797, 'std': 5.217560028530711}, (3, 3): {'mu': 13.585365853658537, 'std': 2.9179503200229355}}
P_S3_CarDirDir = {(0, 0): {'mu': 8.295508274231679, 'std': 4.549897521298174}, (0, 1): {'mu': 8.333333333333334, 'std': 5.736644568830363}, (0, 2): {'mu': 1.0, 'std': 1}, (0, 3): {'mu': 9.204819277108435, 'std': 4.687188132440617}, (1, 0): {'mu': 6.842696629213483, 'std': 4.081273409801981}, (1, 1): {'mu': 6.512974051896207, 'std': 3.813369841462741}, (1, 2): {'mu': 6.425, 'std': 3.875547934792162}, (1, 3): {'mu': 6.0, 'std': 8.48528137423857}, (2, 0): {'mu': 13.0, 'std': 13}, (2, 1): {'mu': 9.19047619047619, 'std': 5.168197911267398}, (2, 2): {'mu': 7.095238095238095, 'std': 4.001704182424828}, (2, 3): {'mu': 10.24, 'std': 4.6393246634971925}, (3, 0): {'mu': 8.153846153846153, 'std': 4.189827665960181}, (3, 1): {'mu': 1.0, 'std': 1}, (3, 2): {'mu': 8.014492753623188, 'std': 5.0043885259169345}, (3, 3): {'mu': 4.305365853658537, 'std': 1.6988680996834191}}
P_Angle_CarDirDir = {(0, 0): {'mu': 4.80928686333518, 'std': 1.4025768544861748}, (0, 1): {'mu': 0.6004423378932372, 'std': 1.6617159658288554}, (0, 2): {'mu': 1.7, 'std':0.5 }, (0, 3): {'mu': 3.652330273622648, 'std': 1}, (1, 0): {'mu': 2.8509018397042407, 'std': 2.7953686219135534}, (1, 1): {'mu': 0.4077990489903197, 'std': 0.5416785906006542}, (1, 2): {'mu': 1.1100659989086448, 'std': 0.7677215678093271}, (1, 3): {'mu': 2.764382090966316, 'std': 0.6681880789279838}, (2, 0): {'mu': 5.311561736234131, 'std': 0.8741422484882687}, (2, 1): {'mu': 0.6570816206796612, 'std': 0.7826028662164126}, (2, 2): {'mu': 1.4745902245859455, 'std': 0.3880501269898892}, (2, 3): {'mu': 2.5947508895477784, 'std': 0.6984315825322553}, (3, 0): {'mu': 4.3261929473950484, 'std': 0.5397974285998951}, (3, 1): {'mu': 1.0133972340855921, 'std': 0.12708295731035754}, (3, 2): {'mu': 1.9934496207135624, 'std': 0.4862954521282074}, (3, 3): {'mu': 3.211504517592011, 'std': 0.6594875961855545}}

pygame.init()
surface = pygame.display.set_mode((1130,670))

maps = Map(map)
maps.create_zone()
car = Car(maps.random_pos(),random.randint(0,3))

img = pygame.image.load("car.png")
img = pygame.transform.scale(img,(30,30))

t = thread_(maps,img)
hilo = threading.Thread(target=t.run,args=(car,))
hilo.start()

while True:
        for event in pygame.event.get():
            if event.type==pygame.QUIT:
                pygame.quit()
                t.stop()
                break
            
            if event.type == pygame.KEYDOWN: 
                if event.key == pygame.K_LEFT:
                    car.update_dir(-1)
                    img = pygame.transform.rotate(img,90)
                if event.key == pygame.K_RIGHT:
                    car.update_dir(1)
                    img = pygame.transform.rotate(img,-90)
        
        surface.fill((255,255,255))
        drawWalls(maps,surface)
        drawCar(surface,t.img_,car)
        if isin(car,maps):
            t.stop()

            maps = Map(map)
            maps.create_zone()
            t.map_ = maps

            dir = random.randint(0,3)

            img = pygame.image.load("car.png")
            img = pygame.transform.scale(img,(30,30))
            img = rotate_img(img,dir)
            print(maps.random_pos())
            car = Car(maps.random_pos(),dir)
            
            t = thread_(maps,img)
            hilo = threading.Thread(target=t.run,args=(car,))
            hilo.start()
        pygame.display.flip()